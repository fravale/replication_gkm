function matrices gen_simulated_data(scalar k, matrix meanbetas)
    # k does NOT include the constant

    tmp = cum(cum((mnormal($nobs, k+1) .* 0.005)))
    matrix betas
    mols(tmp, seq(1,$nobs)', &betas)

    betas = betas .+ vec(meanbetas)'
    # the explanatory variables
    x = filter(mnormal($nobs, k), 1, 0.95)
    # the dependent variable
    y = betas[,1] + sumr(betas[,2:] .* x) + normal()

    matrices ret = defarray(y, x, betas)
    return ret
end function

function matrix tvar_b_ini(series y, list X)
    smpl y X --no-missing
    my = {y}
    mX = {X}
    T = rows(mX)
    k = cols(mX)
    matrix ret = zeros(T, k)
    bsize = xmax(ceil(3 * sqrt(T)), k)
    nblocks = ceil(T/bsize)

    fin = 0
    loop i = 1 .. nblocks-1
        ini = fin + 1
        fin += bsize
        b = mols(my[ini:fin], mX[ini:fin,])
        ret[ini:fin, ] = mshape(b, k, bsize)'
    endloop
    ini = fin+1
    fin = T
    span = fin-ini+1
    if span > k
        b = mols(my[ini:fin], mX[ini:fin,])
    endif

    ret[ini:fin, ] = mshape(b, k, span)'
    return ret
end function

function void at_each_step(bundle *b)
    xt = b.mX[b.t,]
    type = b.modeltype
    if type == 1
        b.obsymat = xt'
    elif type == 2
        b.obsymat = vec(xt | 0)
    endif
    flush
end function

function bundle set_up_ssmod(series depvar, list reg,
                             scalar modeltype)

    scalar n = nelem(reg)

    /* bundle setup */
    if modeltype == 1
        matrix T0 = {1}
        matrix Z0 = {1}
        matrix Z = mshape(Z0, n, 1)
        matrix sel = seq(1, n)
        matrix Q = I(n)
    elif modeltype == 2
        matrix T0 = {1,1; 0,1}
        matrix Z0 = {1; 0}
        matrix Z = mshape(Z0, n*2, 1)
        sel = 1 + seq(0, n-1) * 2
        matrix Q = I(2 * n)
    endif

    matrix T = I(n) ** T0

    bundle SSmod = ksetup(depvar, Z, T, 0.01 * Q)
    matrix SSmod.mX = {reg}
    matrix SSmod.sel = sel
    matrix SSmod.modeltype = modeltype

    SSmod.obsvar = 1
    SSmod.timevar_call = "at_each_step"
    SSmod.diffuse = 2

    return SSmod
end function

function matrix var_s(matrix bl, scalar type)
    if type == 1
        scalar seps = sd(diff(bl[,1]))
        ret = {seps^2}
    elif type == 2
        scalar seta = sd(diff(bl[,2]))
        scalar seps = sd(diff(bl[,1]) - mlag(bl[,2], 1))
        ret = {seps^2, 0; 0, seta^2}
    endif

    return ret
end function

function void init_via_EM(bundle *mod, series y, list X)
    # parameter initialisation via EM
    scalar n = nelem(X)
    scalar type = mod.modeltype

    bhat = tvar_b_ini(y, X)
    if type == 2
        lhat = mnormal($nobs, n) .* 0.01
    endif

    #    print bhat
    #    print mod.mX

    sel = mod.sel

    l0 = -$huge
    dl = $huge
    iter = 0

    loop while dl > 1.0e-7
        iter++
        series m = sumr(bhat .* mod.mX)
        series e = y - m
        s_obs = sd(e)
        mod.obsvar = s_obs^2

        if type == 1
            loop i = 1 .. n
                mod.statevar[i, i] = var_s(bhat[,i], type)
            endloop
        elif type == 2
            ini = 1
            fin = 2
            loop i = 1 .. n
                Qi = var_s(bhat[,i] ~ lhat[,i], type)
                mod.statevar[ini:fin, ini:fin] = Qi
                ini += 2
                fin += 2
            endloop
        endif

        err = ksmooth(&mod)
        bhat = mod.state[,sel]
        if type == 2
            lhat = mod.state[,sel+1]
        endif

        l1 = mod.lnl
        dl = l1 - l0
        printf "%12.4f\n", l1
        l0 = l1
    endloop
end function

function void two_band_plot(list X, string out[null],
                            scalar conflev[0.95])

    # true data, if available, goes at the end of the list

    if !exists(out)
        real_out = "display"
    else
        real_out = out
    endif

    scalar has_true = nelem(X) == 5
    scalar is_time_series = contains($pd, {4, 12, 5, 6, 7})
    series timeser = is_time_series ? $obsdate : time
    matrix m_PD = {timeser || X}


    scalar z = invcdf(z, 1 - (1 - conflev)/2)
    string tf = ""
    
    outfile --tempfile=tf --write --quiet
    printf "unset yrange\n"
    printf "set style fill transparent solid 0.80 noborder\n"
    printf "set nokey\n"

    if is_time_series
        printf "set timefmt \"\%Y\%m\%d\"\n"
        printf "set format x \"\%Y\"\n"
        printf "set xdata time\n"
    else
        printf "set xrange [1:%d]\n", rows(m_PD)
    endif

    printf "set linetype 1 lw 3 lc rgb \"#000000\"\n"
    printf "set linetype 2  lw 3 lc rgb \"#0000FF\"\n"
    printf "set linetype 3  lw 3 lc rgb \"#FF0000\"\n"

    printf "$dati << EOD\n"
    printf "%16.6f", m_PD
    printf "EOD\n"

    printf "plot $dati using 1:($2-%g*$3):($2+%g*$3) notitle lc rgb \"#aaaaaa\" w filledcurve, \\\n", z, z
    printf "$dati using 1:($4-%g*$5):($4+%g*$5) notitle lc rgb \"#DDDDDD\" w filledcurve, \\\n", z, z
    if has_true
        printf "$dati using 1:6 w lines lt 1, \\\n"
    endif
    printf "$dati using 1:2 w lines lt 2, \\\n"
    printf "$dati using 1:4 w lines lt 3\n\n"
end outfile

gnuplot --input="@tf" --output="@real_out"

end function
